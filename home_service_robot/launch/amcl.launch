<?xml version="1.0" encoding="UTF-8"?>

<launch>
 
    <!-- The map_server node -->
    <arg name="map_file" default="$(find home_service_robot)/map/q802_map2.yaml"/>
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

    <!-- The amcl node -->
    <!-- By default, amcl package will look for the scan topic for LiDAR data. -->
    <!-- In the simulation, the Hokuyo LiDAR sensor actually publishes on the -->
    <!-- home_service_robot/laser/scan topic. Remap from scan to our topic -->

    <!-- Furthermore, the AMCL node also requires a set of parameters in order -->
    <!-- to connect the world (map frame) with the robot (odom frame) -->

    <node name="amcl" pkg="amcl" type="amcl" output="screen">
        <!--<remap from="scan" to="home_service_robot/laser/scan"/>-->
        <param name="odom_frame_id" value="odom"/>
        <param name="odom_model_type" value="diff-corrected"/>
        <param name="base_frame_id" value="robot_footprint"/>
        <param name="global_frame_id" value="map"/>

        <!-- these values correspond to our world.launch file -->
        <param name="initial_pose_x" value="-10"/>
        <param name="initial_pose_y" value="4"/>

        <!-- ### AMCL TUNING PARAMS ### -->

        <!-- Overall AMCL -->

        <!-- amcl dynamically adjusts its particles for every iteration, it 
             expects a range of the number of particles as an input. Often,
             this range is tuned based on your system specifications. 
             A larger range, with a high maximum might be too computationally
             extensive for a low-end system-->
        <param name="min_particles" value="500"/>
        <param name="max_particles" value="3000"/>

        <!-- update_min_a and update_min_d:

            Upon receiving a scan, it checks the values for update_min_a and
            update_min_d and compares to how far the robot has moved. Based
            on this comparison it decides whether or not to perform a filter
            update or to discard the scan data. Discarding data could result
            in poorer localization results, and too many frequent filter updates
            for a fast moving robot could also cause computational problems.
        -->
        <!-- So here I am advocating running the particle filter update more 
            frequently: every 0.1m and ~10-deg in rotation.  However I have
            also lowered the min/max particle count to slightly decrease the
            computational load.
        -->

        <!-- Rotational movement required before performing a filter update (default: pi/6.0 or 30-deg)--> 
        <param name="update_min_a" value="0.1745"/> 
        <!-- Translational movement required before performing a filter update (default: 2)-->
        <param name="update_min_d" value="0.10"/>

        <!-- LASER: likelihood_field model -->
        <param name="laser_model_type" value="likelihood_field"/>

        <!-- min and max scan range to be considered: from hokuyo spec -->
        <param name="laser_min_range" value="0.1"/>
        <param name="laser_max_range" value="30.0"/>

        <!-- How many evenly-spaced beams in each scan to be used when updating the filter: (default: 30.0) -->
        <param name="laser_max_beams" value="30.0"/>

        <!-- Mixture weight for the z_hit part of the model (default: 0.95)-->
        <param name="laser_z_hit" value="0.95"/>
        <!-- Mixture weight for the z_rand part of the model (default: 0.05)-->
        <param name="laser_z_rand" value="0.05"/>

        <!-- odom_model_type is "diff" such that it will use the sample_motion_model_odometry
        algorithm from Probabilistic Robotics, p136; this model uses these noise parameters
        where the default is 0.2.  Here we make them significantly smaller -->
        <param name="odom_model" value="diff"/>
        <param name="odom_alpha1" value="0.005"/>
        <param name="odom_alpha2" value="0.005"/>
        <param name="odom_alpha3" value="0.008"/>
        <param name="odom_alpha4" value="0.005"/>

    </node>

    <!-- The move_base node -->
    <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen">
        <remap from="scan" to="home_service_robot/laser/scan"/>

        <!-- config file(s) for the move_base node -->
        <!--    These config files have a preset of parameters defined for you to   -->
        <!--    navigate the robot if we choose to send navigation goal to the robot-->

        <param name="base_global_planner" value="navfn/NavfnROS" />
        <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
        <rosparam file="$(find home_service_robot)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find home_service_robot)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find home_service_robot)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find home_service_robot)/config/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find home_service_robot)/config/base_local_planner_params.yaml" command="load" />

    </node>

</launch>
